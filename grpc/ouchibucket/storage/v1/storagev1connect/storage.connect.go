// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ouchibucket/storage/v1/storage.proto

package storagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/akimoto-junya/ouchi-hub-backend/grpc/ouchibucket/storage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "ouchibucket.storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServiceGetStorageProcedure is the fully-qualified name of the StorageService's GetStorage
	// RPC.
	StorageServiceGetStorageProcedure = "/ouchibucket.storage.v1.StorageService/GetStorage"
	// StorageServiceCreateStorageProcedure is the fully-qualified name of the StorageService's
	// CreateStorage RPC.
	StorageServiceCreateStorageProcedure = "/ouchibucket.storage.v1.StorageService/CreateStorage"
	// StorageServiceDeleteStorageProcedure is the fully-qualified name of the StorageService's
	// DeleteStorage RPC.
	StorageServiceDeleteStorageProcedure = "/ouchibucket.storage.v1.StorageService/DeleteStorage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storageServiceServiceDescriptor             = v1.File_ouchibucket_storage_v1_storage_proto.Services().ByName("StorageService")
	storageServiceGetStorageMethodDescriptor    = storageServiceServiceDescriptor.Methods().ByName("GetStorage")
	storageServiceCreateStorageMethodDescriptor = storageServiceServiceDescriptor.Methods().ByName("CreateStorage")
	storageServiceDeleteStorageMethodDescriptor = storageServiceServiceDescriptor.Methods().ByName("DeleteStorage")
)

// StorageServiceClient is a client for the ouchibucket.storage.v1.StorageService service.
type StorageServiceClient interface {
	GetStorage(context.Context, *connect.Request[v1.GetStorageRequest]) (*connect.Response[v1.GetStorageResponse], error)
	CreateStorage(context.Context, *connect.Request[v1.CreateStorageRequest]) (*connect.Response[v1.CreateStorageResponse], error)
	DeleteStorage(context.Context, *connect.Request[v1.DeleteStorageRequest]) (*connect.Response[v1.DeleteStorageResponse], error)
}

// NewStorageServiceClient constructs a client for the ouchibucket.storage.v1.StorageService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storageServiceClient{
		getStorage: connect.NewClient[v1.GetStorageRequest, v1.GetStorageResponse](
			httpClient,
			baseURL+StorageServiceGetStorageProcedure,
			connect.WithSchema(storageServiceGetStorageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createStorage: connect.NewClient[v1.CreateStorageRequest, v1.CreateStorageResponse](
			httpClient,
			baseURL+StorageServiceCreateStorageProcedure,
			connect.WithSchema(storageServiceCreateStorageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteStorage: connect.NewClient[v1.DeleteStorageRequest, v1.DeleteStorageResponse](
			httpClient,
			baseURL+StorageServiceDeleteStorageProcedure,
			connect.WithSchema(storageServiceDeleteStorageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	getStorage    *connect.Client[v1.GetStorageRequest, v1.GetStorageResponse]
	createStorage *connect.Client[v1.CreateStorageRequest, v1.CreateStorageResponse]
	deleteStorage *connect.Client[v1.DeleteStorageRequest, v1.DeleteStorageResponse]
}

// GetStorage calls ouchibucket.storage.v1.StorageService.GetStorage.
func (c *storageServiceClient) GetStorage(ctx context.Context, req *connect.Request[v1.GetStorageRequest]) (*connect.Response[v1.GetStorageResponse], error) {
	return c.getStorage.CallUnary(ctx, req)
}

// CreateStorage calls ouchibucket.storage.v1.StorageService.CreateStorage.
func (c *storageServiceClient) CreateStorage(ctx context.Context, req *connect.Request[v1.CreateStorageRequest]) (*connect.Response[v1.CreateStorageResponse], error) {
	return c.createStorage.CallUnary(ctx, req)
}

// DeleteStorage calls ouchibucket.storage.v1.StorageService.DeleteStorage.
func (c *storageServiceClient) DeleteStorage(ctx context.Context, req *connect.Request[v1.DeleteStorageRequest]) (*connect.Response[v1.DeleteStorageResponse], error) {
	return c.deleteStorage.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the ouchibucket.storage.v1.StorageService service.
type StorageServiceHandler interface {
	GetStorage(context.Context, *connect.Request[v1.GetStorageRequest]) (*connect.Response[v1.GetStorageResponse], error)
	CreateStorage(context.Context, *connect.Request[v1.CreateStorageRequest]) (*connect.Response[v1.CreateStorageResponse], error)
	DeleteStorage(context.Context, *connect.Request[v1.DeleteStorageRequest]) (*connect.Response[v1.DeleteStorageResponse], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceGetStorageHandler := connect.NewUnaryHandler(
		StorageServiceGetStorageProcedure,
		svc.GetStorage,
		connect.WithSchema(storageServiceGetStorageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateStorageHandler := connect.NewUnaryHandler(
		StorageServiceCreateStorageProcedure,
		svc.CreateStorage,
		connect.WithSchema(storageServiceCreateStorageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteStorageHandler := connect.NewUnaryHandler(
		StorageServiceDeleteStorageProcedure,
		svc.DeleteStorage,
		connect.WithSchema(storageServiceDeleteStorageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ouchibucket.storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServiceGetStorageProcedure:
			storageServiceGetStorageHandler.ServeHTTP(w, r)
		case StorageServiceCreateStorageProcedure:
			storageServiceCreateStorageHandler.ServeHTTP(w, r)
		case StorageServiceDeleteStorageProcedure:
			storageServiceDeleteStorageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) GetStorage(context.Context, *connect.Request[v1.GetStorageRequest]) (*connect.Response[v1.GetStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ouchibucket.storage.v1.StorageService.GetStorage is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateStorage(context.Context, *connect.Request[v1.CreateStorageRequest]) (*connect.Response[v1.CreateStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ouchibucket.storage.v1.StorageService.CreateStorage is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteStorage(context.Context, *connect.Request[v1.DeleteStorageRequest]) (*connect.Response[v1.DeleteStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ouchibucket.storage.v1.StorageService.DeleteStorage is not implemented"))
}
