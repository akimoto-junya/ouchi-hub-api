// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ouchihub/maker/v1/maker.proto

package makerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/akimoto-junya/ouchi-hub-backend/grpc/ouchihub/maker/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MakerServiceName is the fully-qualified name of the MakerService service.
	MakerServiceName = "ouchihub.maker.v1.MakerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MakerServiceListMakersProcedure is the fully-qualified name of the MakerService's ListMakers RPC.
	MakerServiceListMakersProcedure = "/ouchihub.maker.v1.MakerService/ListMakers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	makerServiceServiceDescriptor          = v1.File_ouchihub_maker_v1_maker_proto.Services().ByName("MakerService")
	makerServiceListMakersMethodDescriptor = makerServiceServiceDescriptor.Methods().ByName("ListMakers")
)

// MakerServiceClient is a client for the ouchihub.maker.v1.MakerService service.
type MakerServiceClient interface {
	ListMakers(context.Context, *connect.Request[v1.ListMakersRequest]) (*connect.Response[v1.ListMakersResponse], error)
}

// NewMakerServiceClient constructs a client for the ouchihub.maker.v1.MakerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMakerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MakerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &makerServiceClient{
		listMakers: connect.NewClient[v1.ListMakersRequest, v1.ListMakersResponse](
			httpClient,
			baseURL+MakerServiceListMakersProcedure,
			connect.WithSchema(makerServiceListMakersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// makerServiceClient implements MakerServiceClient.
type makerServiceClient struct {
	listMakers *connect.Client[v1.ListMakersRequest, v1.ListMakersResponse]
}

// ListMakers calls ouchihub.maker.v1.MakerService.ListMakers.
func (c *makerServiceClient) ListMakers(ctx context.Context, req *connect.Request[v1.ListMakersRequest]) (*connect.Response[v1.ListMakersResponse], error) {
	return c.listMakers.CallUnary(ctx, req)
}

// MakerServiceHandler is an implementation of the ouchihub.maker.v1.MakerService service.
type MakerServiceHandler interface {
	ListMakers(context.Context, *connect.Request[v1.ListMakersRequest]) (*connect.Response[v1.ListMakersResponse], error)
}

// NewMakerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMakerServiceHandler(svc MakerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	makerServiceListMakersHandler := connect.NewUnaryHandler(
		MakerServiceListMakersProcedure,
		svc.ListMakers,
		connect.WithSchema(makerServiceListMakersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ouchihub.maker.v1.MakerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MakerServiceListMakersProcedure:
			makerServiceListMakersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMakerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMakerServiceHandler struct{}

func (UnimplementedMakerServiceHandler) ListMakers(context.Context, *connect.Request[v1.ListMakersRequest]) (*connect.Response[v1.ListMakersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ouchihub.maker.v1.MakerService.ListMakers is not implemented"))
}
