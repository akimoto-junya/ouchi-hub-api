// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ouchihub/content/v1/content.proto

package contentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/akimoto-junya/ouchi-hub-backend/grpc/ouchihub/content/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ContentServiceName is the fully-qualified name of the ContentService service.
	ContentServiceName = "ouchihub.content.v1.ContentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ContentServiceCreateContentProcedure is the fully-qualified name of the ContentService's
	// CreateContent RPC.
	ContentServiceCreateContentProcedure = "/ouchihub.content.v1.ContentService/CreateContent"
	// ContentServiceListContentsProcedure is the fully-qualified name of the ContentService's
	// ListContents RPC.
	ContentServiceListContentsProcedure = "/ouchihub.content.v1.ContentService/ListContents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	contentServiceServiceDescriptor             = v1.File_ouchihub_content_v1_content_proto.Services().ByName("ContentService")
	contentServiceCreateContentMethodDescriptor = contentServiceServiceDescriptor.Methods().ByName("CreateContent")
	contentServiceListContentsMethodDescriptor  = contentServiceServiceDescriptor.Methods().ByName("ListContents")
)

// ContentServiceClient is a client for the ouchihub.content.v1.ContentService service.
type ContentServiceClient interface {
	CreateContent(context.Context, *connect.Request[v1.CreateContentRequest]) (*connect.Response[v1.CreateContentResponse], error)
	ListContents(context.Context, *connect.Request[v1.ListContentsRequest]) (*connect.Response[v1.ListContentsResponse], error)
}

// NewContentServiceClient constructs a client for the ouchihub.content.v1.ContentService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewContentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ContentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &contentServiceClient{
		createContent: connect.NewClient[v1.CreateContentRequest, v1.CreateContentResponse](
			httpClient,
			baseURL+ContentServiceCreateContentProcedure,
			connect.WithSchema(contentServiceCreateContentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listContents: connect.NewClient[v1.ListContentsRequest, v1.ListContentsResponse](
			httpClient,
			baseURL+ContentServiceListContentsProcedure,
			connect.WithSchema(contentServiceListContentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// contentServiceClient implements ContentServiceClient.
type contentServiceClient struct {
	createContent *connect.Client[v1.CreateContentRequest, v1.CreateContentResponse]
	listContents  *connect.Client[v1.ListContentsRequest, v1.ListContentsResponse]
}

// CreateContent calls ouchihub.content.v1.ContentService.CreateContent.
func (c *contentServiceClient) CreateContent(ctx context.Context, req *connect.Request[v1.CreateContentRequest]) (*connect.Response[v1.CreateContentResponse], error) {
	return c.createContent.CallUnary(ctx, req)
}

// ListContents calls ouchihub.content.v1.ContentService.ListContents.
func (c *contentServiceClient) ListContents(ctx context.Context, req *connect.Request[v1.ListContentsRequest]) (*connect.Response[v1.ListContentsResponse], error) {
	return c.listContents.CallUnary(ctx, req)
}

// ContentServiceHandler is an implementation of the ouchihub.content.v1.ContentService service.
type ContentServiceHandler interface {
	CreateContent(context.Context, *connect.Request[v1.CreateContentRequest]) (*connect.Response[v1.CreateContentResponse], error)
	ListContents(context.Context, *connect.Request[v1.ListContentsRequest]) (*connect.Response[v1.ListContentsResponse], error)
}

// NewContentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewContentServiceHandler(svc ContentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	contentServiceCreateContentHandler := connect.NewUnaryHandler(
		ContentServiceCreateContentProcedure,
		svc.CreateContent,
		connect.WithSchema(contentServiceCreateContentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceListContentsHandler := connect.NewUnaryHandler(
		ContentServiceListContentsProcedure,
		svc.ListContents,
		connect.WithSchema(contentServiceListContentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ouchihub.content.v1.ContentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ContentServiceCreateContentProcedure:
			contentServiceCreateContentHandler.ServeHTTP(w, r)
		case ContentServiceListContentsProcedure:
			contentServiceListContentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedContentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedContentServiceHandler struct{}

func (UnimplementedContentServiceHandler) CreateContent(context.Context, *connect.Request[v1.CreateContentRequest]) (*connect.Response[v1.CreateContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ouchihub.content.v1.ContentService.CreateContent is not implemented"))
}

func (UnimplementedContentServiceHandler) ListContents(context.Context, *connect.Request[v1.ListContentsRequest]) (*connect.Response[v1.ListContentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ouchihub.content.v1.ContentService.ListContents is not implemented"))
}
