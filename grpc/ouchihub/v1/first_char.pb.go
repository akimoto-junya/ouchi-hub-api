// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ouchihub/v1/first_char.proto

package ouchihubv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Hiragana int32

const (
	Hiragana_HIRAGANA_UNSPECIFIED Hiragana = 0
	// あ
	Hiragana_HIRAGANA_A Hiragana = 1
	Hiragana_HIRAGANA_I Hiragana = 2
	Hiragana_HIRAGANA_U Hiragana = 3
	Hiragana_HIRAGANA_E Hiragana = 4
	Hiragana_HIRAGANA_O Hiragana = 5
	// か
	Hiragana_HIRAGANA_KA Hiragana = 6
	Hiragana_HIRAGANA_KI Hiragana = 7
	Hiragana_HIRAGANA_KU Hiragana = 8
	Hiragana_HIRAGANA_KE Hiragana = 9
	Hiragana_HIRAGANA_KO Hiragana = 10
	// さ
	Hiragana_HIRAGANA_SA Hiragana = 11
	Hiragana_HIRAGANA_SI Hiragana = 12
	Hiragana_HIRAGANA_SU Hiragana = 13
	Hiragana_HIRAGANA_SE Hiragana = 14
	Hiragana_HIRAGANA_SO Hiragana = 15
	// た
	Hiragana_HIRAGANA_TA Hiragana = 16
	Hiragana_HIRAGANA_TI Hiragana = 17
	Hiragana_HIRAGANA_TU Hiragana = 18
	Hiragana_HIRAGANA_TE Hiragana = 19
	Hiragana_HIRAGANA_TO Hiragana = 20
	// な
	Hiragana_HIRAGANA_NA Hiragana = 21
	Hiragana_HIRAGANA_NI Hiragana = 22
	Hiragana_HIRAGANA_NU Hiragana = 23
	Hiragana_HIRAGANA_NE Hiragana = 24
	Hiragana_HIRAGANA_NO Hiragana = 25
	// は
	Hiragana_HIRAGANA_HA Hiragana = 26
	Hiragana_HIRAGANA_HI Hiragana = 27
	Hiragana_HIRAGANA_HU Hiragana = 28
	Hiragana_HIRAGANA_HE Hiragana = 29
	Hiragana_HIRAGANA_HO Hiragana = 30
	// ま
	Hiragana_HIRAGANA_MA Hiragana = 31
	Hiragana_HIRAGANA_MI Hiragana = 32
	Hiragana_HIRAGANA_MU Hiragana = 33
	Hiragana_HIRAGANA_ME Hiragana = 34
	Hiragana_HIRAGANA_MO Hiragana = 35
	// や
	Hiragana_HIRAGANA_YA Hiragana = 36
	Hiragana_HIRAGANA_YU Hiragana = 37
	Hiragana_HIRAGANA_YO Hiragana = 38
	// ら
	Hiragana_HIRAGANA_RA Hiragana = 39
	Hiragana_HIRAGANA_RI Hiragana = 40
	Hiragana_HIRAGANA_RU Hiragana = 41
	Hiragana_HIRAGANA_RE Hiragana = 42
	Hiragana_HIRAGANA_RO Hiragana = 43
	// わ
	Hiragana_HIRAGANA_WA Hiragana = 44
	Hiragana_HIRAGANA_WO Hiragana = 45
	Hiragana_HIRAGANA_NN Hiragana = 46
)

// Enum value maps for Hiragana.
var (
	Hiragana_name = map[int32]string{
		0:  "HIRAGANA_UNSPECIFIED",
		1:  "HIRAGANA_A",
		2:  "HIRAGANA_I",
		3:  "HIRAGANA_U",
		4:  "HIRAGANA_E",
		5:  "HIRAGANA_O",
		6:  "HIRAGANA_KA",
		7:  "HIRAGANA_KI",
		8:  "HIRAGANA_KU",
		9:  "HIRAGANA_KE",
		10: "HIRAGANA_KO",
		11: "HIRAGANA_SA",
		12: "HIRAGANA_SI",
		13: "HIRAGANA_SU",
		14: "HIRAGANA_SE",
		15: "HIRAGANA_SO",
		16: "HIRAGANA_TA",
		17: "HIRAGANA_TI",
		18: "HIRAGANA_TU",
		19: "HIRAGANA_TE",
		20: "HIRAGANA_TO",
		21: "HIRAGANA_NA",
		22: "HIRAGANA_NI",
		23: "HIRAGANA_NU",
		24: "HIRAGANA_NE",
		25: "HIRAGANA_NO",
		26: "HIRAGANA_HA",
		27: "HIRAGANA_HI",
		28: "HIRAGANA_HU",
		29: "HIRAGANA_HE",
		30: "HIRAGANA_HO",
		31: "HIRAGANA_MA",
		32: "HIRAGANA_MI",
		33: "HIRAGANA_MU",
		34: "HIRAGANA_ME",
		35: "HIRAGANA_MO",
		36: "HIRAGANA_YA",
		37: "HIRAGANA_YU",
		38: "HIRAGANA_YO",
		39: "HIRAGANA_RA",
		40: "HIRAGANA_RI",
		41: "HIRAGANA_RU",
		42: "HIRAGANA_RE",
		43: "HIRAGANA_RO",
		44: "HIRAGANA_WA",
		45: "HIRAGANA_WO",
		46: "HIRAGANA_NN",
	}
	Hiragana_value = map[string]int32{
		"HIRAGANA_UNSPECIFIED": 0,
		"HIRAGANA_A":           1,
		"HIRAGANA_I":           2,
		"HIRAGANA_U":           3,
		"HIRAGANA_E":           4,
		"HIRAGANA_O":           5,
		"HIRAGANA_KA":          6,
		"HIRAGANA_KI":          7,
		"HIRAGANA_KU":          8,
		"HIRAGANA_KE":          9,
		"HIRAGANA_KO":          10,
		"HIRAGANA_SA":          11,
		"HIRAGANA_SI":          12,
		"HIRAGANA_SU":          13,
		"HIRAGANA_SE":          14,
		"HIRAGANA_SO":          15,
		"HIRAGANA_TA":          16,
		"HIRAGANA_TI":          17,
		"HIRAGANA_TU":          18,
		"HIRAGANA_TE":          19,
		"HIRAGANA_TO":          20,
		"HIRAGANA_NA":          21,
		"HIRAGANA_NI":          22,
		"HIRAGANA_NU":          23,
		"HIRAGANA_NE":          24,
		"HIRAGANA_NO":          25,
		"HIRAGANA_HA":          26,
		"HIRAGANA_HI":          27,
		"HIRAGANA_HU":          28,
		"HIRAGANA_HE":          29,
		"HIRAGANA_HO":          30,
		"HIRAGANA_MA":          31,
		"HIRAGANA_MI":          32,
		"HIRAGANA_MU":          33,
		"HIRAGANA_ME":          34,
		"HIRAGANA_MO":          35,
		"HIRAGANA_YA":          36,
		"HIRAGANA_YU":          37,
		"HIRAGANA_YO":          38,
		"HIRAGANA_RA":          39,
		"HIRAGANA_RI":          40,
		"HIRAGANA_RU":          41,
		"HIRAGANA_RE":          42,
		"HIRAGANA_RO":          43,
		"HIRAGANA_WA":          44,
		"HIRAGANA_WO":          45,
		"HIRAGANA_NN":          46,
	}
)

func (x Hiragana) Enum() *Hiragana {
	p := new(Hiragana)
	*p = x
	return p
}

func (x Hiragana) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hiragana) Descriptor() protoreflect.EnumDescriptor {
	return file_ouchihub_v1_first_char_proto_enumTypes[0].Descriptor()
}

func (Hiragana) Type() protoreflect.EnumType {
	return &file_ouchihub_v1_first_char_proto_enumTypes[0]
}

func (x Hiragana) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hiragana.Descriptor instead.
func (Hiragana) EnumDescriptor() ([]byte, []int) {
	return file_ouchihub_v1_first_char_proto_rawDescGZIP(), []int{0}
}

type OtherChar int32

const (
	OtherChar_OTHER_CHAR_UNSPECIFIED OtherChar = 0
	OtherChar_OTHER_CHAR_NUM         OtherChar = 1
	OtherChar_OTHER_CHAR_SYMBOL      OtherChar = 2
)

// Enum value maps for OtherChar.
var (
	OtherChar_name = map[int32]string{
		0: "OTHER_CHAR_UNSPECIFIED",
		1: "OTHER_CHAR_NUM",
		2: "OTHER_CHAR_SYMBOL",
	}
	OtherChar_value = map[string]int32{
		"OTHER_CHAR_UNSPECIFIED": 0,
		"OTHER_CHAR_NUM":         1,
		"OTHER_CHAR_SYMBOL":      2,
	}
)

func (x OtherChar) Enum() *OtherChar {
	p := new(OtherChar)
	*p = x
	return p
}

func (x OtherChar) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtherChar) Descriptor() protoreflect.EnumDescriptor {
	return file_ouchihub_v1_first_char_proto_enumTypes[1].Descriptor()
}

func (OtherChar) Type() protoreflect.EnumType {
	return &file_ouchihub_v1_first_char_proto_enumTypes[1]
}

func (x OtherChar) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OtherChar.Descriptor instead.
func (OtherChar) EnumDescriptor() ([]byte, []int) {
	return file_ouchihub_v1_first_char_proto_rawDescGZIP(), []int{1}
}

type FirstChar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FirstChar_Hiragana
	//	*FirstChar_Other
	Value isFirstChar_Value `protobuf_oneof:"value"`
}

func (x *FirstChar) Reset() {
	*x = FirstChar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ouchihub_v1_first_char_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstChar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstChar) ProtoMessage() {}

func (x *FirstChar) ProtoReflect() protoreflect.Message {
	mi := &file_ouchihub_v1_first_char_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstChar.ProtoReflect.Descriptor instead.
func (*FirstChar) Descriptor() ([]byte, []int) {
	return file_ouchihub_v1_first_char_proto_rawDescGZIP(), []int{0}
}

func (m *FirstChar) GetValue() isFirstChar_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FirstChar) GetHiragana() Hiragana {
	if x, ok := x.GetValue().(*FirstChar_Hiragana); ok {
		return x.Hiragana
	}
	return Hiragana_HIRAGANA_UNSPECIFIED
}

func (x *FirstChar) GetOther() OtherChar {
	if x, ok := x.GetValue().(*FirstChar_Other); ok {
		return x.Other
	}
	return OtherChar_OTHER_CHAR_UNSPECIFIED
}

type isFirstChar_Value interface {
	isFirstChar_Value()
}

type FirstChar_Hiragana struct {
	Hiragana Hiragana `protobuf:"varint,1,opt,name=hiragana,proto3,enum=ouchihub.v1.Hiragana,oneof"`
}

type FirstChar_Other struct {
	Other OtherChar `protobuf:"varint,2,opt,name=other,proto3,enum=ouchihub.v1.OtherChar,oneof"`
}

func (*FirstChar_Hiragana) isFirstChar_Value() {}

func (*FirstChar_Other) isFirstChar_Value() {}

var File_ouchihub_v1_first_char_proto protoreflect.FileDescriptor

var file_ouchihub_v1_first_char_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x6f, 0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x22, 0x79, 0x0a, 0x09, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x68, 0x69, 0x72, 0x61,
	0x67, 0x61, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x75, 0x63,
	0x68, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x72, 0x61, 0x67, 0x61, 0x6e,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x68, 0x69, 0x72, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x12, 0x2e, 0x0a,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f,
	0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xad, 0x06, 0x0a, 0x08, 0x48, 0x69, 0x72, 0x61, 0x67,
	0x61, 0x6e, 0x61, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x49, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x55, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4f, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4b, 0x41, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4b, 0x49, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4b, 0x55, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4b, 0x45, 0x10,
	0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4b, 0x4f,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x53,
	0x41, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f,
	0x53, 0x49, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41,
	0x5f, 0x53, 0x55, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e,
	0x41, 0x5f, 0x53, 0x45, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41,
	0x4e, 0x41, 0x5f, 0x53, 0x4f, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47,
	0x41, 0x4e, 0x41, 0x5f, 0x54, 0x41, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41,
	0x47, 0x41, 0x4e, 0x41, 0x5f, 0x54, 0x49, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52,
	0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x54, 0x55, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49,
	0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x54, 0x45, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x48,
	0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x54, 0x4f, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b,
	0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4e, 0x41, 0x10, 0x15, 0x12, 0x0f, 0x0a,
	0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4e, 0x49, 0x10, 0x16, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4e, 0x55, 0x10, 0x17, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4e, 0x45, 0x10, 0x18,
	0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4e, 0x4f, 0x10,
	0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x48, 0x41,
	0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x48,
	0x49, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f,
	0x48, 0x55, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41,
	0x5f, 0x48, 0x45, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e,
	0x41, 0x5f, 0x48, 0x4f, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41,
	0x4e, 0x41, 0x5f, 0x4d, 0x41, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47,
	0x41, 0x4e, 0x41, 0x5f, 0x4d, 0x49, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41,
	0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4d, 0x55, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52,
	0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4d, 0x45, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49,
	0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x4d, 0x4f, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x48,
	0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x59, 0x41, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b,
	0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x59, 0x55, 0x10, 0x25, 0x12, 0x0f, 0x0a,
	0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x59, 0x4f, 0x10, 0x26, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x52, 0x41, 0x10, 0x27, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x52, 0x49, 0x10, 0x28,
	0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x52, 0x55, 0x10,
	0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x52, 0x45,
	0x10, 0x2a, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x52,
	0x4f, 0x10, 0x2b, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41, 0x5f,
	0x57, 0x41, 0x10, 0x2c, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e, 0x41,
	0x5f, 0x57, 0x4f, 0x10, 0x2d, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x52, 0x41, 0x47, 0x41, 0x4e,
	0x41, 0x5f, 0x4e, 0x4e, 0x10, 0x2e, 0x2a, 0x52, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x02, 0x42, 0xb6, 0x01, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x2e, 0x6f, 0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x69,
	0x6d, 0x6f, 0x74, 0x6f, 0x2d, 0x6a, 0x75, 0x6e, 0x79, 0x61, 0x2f, 0x6f, 0x75, 0x63, 0x68, 0x69,
	0x2d, 0x68, 0x75, 0x62, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x6f, 0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x75,
	0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4f, 0x58, 0x58, 0xaa, 0x02,
	0x0b, 0x4f, 0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x4f,
	0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x4f, 0x75, 0x63,
	0x68, 0x69, 0x68, 0x75, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x4f, 0x75, 0x63, 0x68, 0x69, 0x68, 0x75, 0x62, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ouchihub_v1_first_char_proto_rawDescOnce sync.Once
	file_ouchihub_v1_first_char_proto_rawDescData = file_ouchihub_v1_first_char_proto_rawDesc
)

func file_ouchihub_v1_first_char_proto_rawDescGZIP() []byte {
	file_ouchihub_v1_first_char_proto_rawDescOnce.Do(func() {
		file_ouchihub_v1_first_char_proto_rawDescData = protoimpl.X.CompressGZIP(file_ouchihub_v1_first_char_proto_rawDescData)
	})
	return file_ouchihub_v1_first_char_proto_rawDescData
}

var file_ouchihub_v1_first_char_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ouchihub_v1_first_char_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ouchihub_v1_first_char_proto_goTypes = []interface{}{
	(Hiragana)(0),     // 0: ouchihub.v1.Hiragana
	(OtherChar)(0),    // 1: ouchihub.v1.OtherChar
	(*FirstChar)(nil), // 2: ouchihub.v1.FirstChar
}
var file_ouchihub_v1_first_char_proto_depIdxs = []int32{
	0, // 0: ouchihub.v1.FirstChar.hiragana:type_name -> ouchihub.v1.Hiragana
	1, // 1: ouchihub.v1.FirstChar.other:type_name -> ouchihub.v1.OtherChar
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ouchihub_v1_first_char_proto_init() }
func file_ouchihub_v1_first_char_proto_init() {
	if File_ouchihub_v1_first_char_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ouchihub_v1_first_char_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstChar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ouchihub_v1_first_char_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FirstChar_Hiragana)(nil),
		(*FirstChar_Other)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ouchihub_v1_first_char_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ouchihub_v1_first_char_proto_goTypes,
		DependencyIndexes: file_ouchihub_v1_first_char_proto_depIdxs,
		EnumInfos:         file_ouchihub_v1_first_char_proto_enumTypes,
		MessageInfos:      file_ouchihub_v1_first_char_proto_msgTypes,
	}.Build()
	File_ouchihub_v1_first_char_proto = out.File
	file_ouchihub_v1_first_char_proto_rawDesc = nil
	file_ouchihub_v1_first_char_proto_goTypes = nil
	file_ouchihub_v1_first_char_proto_depIdxs = nil
}
